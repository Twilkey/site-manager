{"version":3,"file":"static/js/207.8f6ffb9f.chunk.js","mappings":"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","sources":["components/FormField.js","functions/InsertData.js","functions/UpdateData.js","pages/RegistrarAdd.js","../node_modules/rsuite/esm/Schema/index.js","../node_modules/rsuite/esm/Schema/Schema.js"],"sourcesContent":["import React, { forwardRef } from \"react\";\r\nimport { Form } from 'rsuite';\r\n\r\nconst FormField = forwardRef((props, ref) => {\r\n    const { name, message, label, accepter, error, ...rest } = props;\r\n    return (\r\n        <Form.Group controlId={`${name}`} ref={ref} className={error ? 'has-error' : ''}>\r\n            <Form.ControlLabel>{label} </Form.ControlLabel>\r\n            <Form.Control name={name} accepter={accepter} errorMessage={error} {...rest} />\r\n            <Form.HelpText>{message}</Form.HelpText>\r\n        </Form.Group>\r\n    );\r\n});\r\n  \r\nexport default FormField;","const InsertData = async (toaster, Message, action, table, params) => {\r\n    var formData = new FormData();\r\n    formData.append('action', action);\r\n    formData.append('enviornment', window.location.hostname);\r\n    if(table !== null) {\r\n        formData.append('table', table);\r\n    }\r\n    formData.append('params', JSON.stringify(params));\r\n\r\n    return await fetch(`${process.env.REACT_APP_BACKEND_URL}`, {\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        body: formData\r\n    })\r\n    .then((response) => {\r\n        if (!response.ok) {\r\n            toaster.push(<Message showIcon type=\"error\">Network response was not OK</Message>, { duration: 3000 });\r\n            throw new Error(\"Network response was not OK\");\r\n        }\r\n        return response.json();\r\n    })\r\n    .then((result) => {\r\n        return result;\r\n    })\r\n    .catch((error) => {\r\n        toaster.push(<Message showIcon type=\"error\">There has been a problem with your fetch operation: {error}</Message>, { duration: 3000 });\r\n    });\r\n}\r\n\r\nexport default InsertData;","const UpdateData = async (toaster, Message, action, table, params, where, title) => {\r\n    var formData = new FormData();\r\n    formData.append('action', action);\r\n    formData.append('enviornment', window.location.hostname);\r\n    if(table !== null) {\r\n        formData.append('table', table);\r\n    }\r\n    if(where !== null) {\r\n        formData.append('where', where);\r\n    }\r\n    formData.append('params', JSON.stringify(params));\r\n\r\n    await fetch(`${process.env.REACT_APP_BACKEND_URL}`, {\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        body: formData\r\n    })\r\n    .then((response) => {\r\n        if (!response.ok) {\r\n            toaster.push(<Message showIcon type=\"error\">Network response was not OK</Message>, { duration: 3000 });\r\n            throw new Error(\"Network response was not OK\");\r\n        }\r\n        return response.json();\r\n    })\r\n    .then((result) => {\r\n        toaster.push(<Message showIcon type=\"success\">{title} was successfully updated</Message>, { duration: 3000 });\r\n        return result;\r\n    })\r\n    .catch((error) => {\r\n        toaster.push(<Message showIcon type=\"error\">There has been a problem with your fetch operation: {error}</Message>, { duration: 3000 });\r\n        console.error(\"There has been a problem with your fetch operation:\", error);\r\n    });\r\n}\r\n\r\nexport default UpdateData;","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Message, toaster, Form, Input, Button, Schema } from 'rsuite';\r\n\r\nimport FormField from \"../components/FormField\";\r\n\r\nimport InsertData from \"../functions/InsertData\";\r\nimport UpdateData from \"../functions/UpdateData\";\r\n\r\nconst { StringType } = Schema.Types;\r\nconst model = Schema.Model({\r\n    name: StringType().isRequired('This field is required.')\r\n});\r\n\r\nconst RegistrarAdd = (props) => {\r\n    const routeParams = useParams();\r\n    const formRef = useRef();\r\n    const fetchingComplete = useRef(false);\r\n    const [pageTitle, setpageTitle] = useState('Add Registrar');\r\n    const [formError, setFormError] = useState({});\r\n\r\n    const [data, setData] = useState({\r\n        name: \"\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(fetchingComplete.current === false) {\r\n            if(Object.keys(routeParams).length !== 0 && routeParams.constructor === Object) {\r\n                const getData = async () => {\r\n                    try {\r\n                        await fetch(`${process.env.REACT_APP_BACKEND_URL}?` + new URLSearchParams({\r\n                            enviornment: window.location.hostname,\r\n                            action: 'get_custom',\r\n                            fetchtype: 'single',\r\n                            table: 'registrars',\r\n                            where: 'id=:id',\r\n                            params: `id:${routeParams.id}`\r\n                        }))\r\n                        .then((response) => {\r\n                            return response.json();\r\n                        })\r\n                        .then((result) => {\r\n                            setpageTitle('Editing '+result.domain);\r\n                            setData({\r\n                                domain: result.domain,\r\n                                registrar: result.registrar,\r\n                            });\r\n                        },\r\n                        (error) => {\r\n                            console.log(error)\r\n                            toaster.push(<Message showIcon type=\"error\">{error.message}</Message>, { duration: 3000 });\r\n                        });\r\n                    } catch (error) {\r\n                        console.log(error)\r\n                        toaster.push(<Message showIcon type=\"error\">{error.message}</Message>, { duration: 3000 });\r\n                    }\r\n                }\r\n\r\n                getData();\r\n            }\r\n            fetchingComplete.current = true;\r\n        }\r\n    }, [routeParams]);\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if(formRef.current.check()) {\r\n            if(routeParams.id) {\r\n                await UpdateData(\r\n                    toaster, \r\n                    Message,\r\n                    'update_custom', \r\n                    'registrars', \r\n                    {\r\n                        id: routeParams.id,\r\n                        name: data.name\r\n                    }, \r\n                    'id=:id', \r\n                    pageTitle\r\n                );\r\n            } else {\r\n                await InsertData(\r\n                    toaster, \r\n                    Message,\r\n                    'insert_custom', \r\n                    'registrars', \r\n                    {\r\n                        name: data.name\r\n                    }, \r\n                    '/domain/registrar/list'\r\n                );\r\n            }\r\n        } else {\r\n            console.log(formError)\r\n            toaster.push(<Message showIcon type=\"error\"><pre>{JSON.stringify(formError)}</pre></Message>, { duration: 3000 });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                ref={formRef}\r\n                onChange={setData}\r\n                onCheck={setFormError}\r\n                formValue={data}\r\n                model={model}\r\n                fluid\r\n            >\r\n                <div className='page-title'>\r\n                    <h1>{pageTitle}</h1>\r\n                </div>\r\n                <div className='page-box'>\r\n                    <div className='page-box-form-input'>\r\n                        <FormField name=\"name\" label=\"Name\" accepter={Input} error={formError.name} />\r\n                    </div>\r\n                </div>\r\n                <Form.Group>\r\n                    <Button appearance=\"primary\" onClick={handleSubmit}>Submit</Button>\r\n                </Form.Group>\r\n            </Form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RegistrarAdd;","import Schema from './Schema';\nexport default Schema;","import { SchemaModel, StringType, NumberType, ArrayType, DateType, ObjectType, BooleanType, MixedType } from 'schema-typed';\nvar SchemaTyped = {\n  Model: SchemaModel,\n  Types: {\n    StringType: StringType,\n    NumberType: NumberType,\n    ArrayType: ArrayType,\n    DateType: DateType,\n    ObjectType: ObjectType,\n    BooleanType: BooleanType,\n    MixedType: MixedType\n  }\n};\nexport default SchemaTyped;"],"names":["FormField","forwardRef","props","ref","name","message","label","accepter","error","rest","controlId","className","errorMessage","InsertData","toaster","Message","action","table","params","formData","FormData","append","window","location","hostname","JSON","stringify","fetch","process","method","mode","body","then","response","ok","push","showIcon","type","duration","Error","json","result","catch","UpdateData","where","title","console","StringType","Schema","model","isRequired","routeParams","useParams","formRef","useRef","fetchingComplete","useState","pageTitle","setpageTitle","formError","setFormError","data","setData","useEffect","current","Object","keys","length","constructor","getData","URLSearchParams","enviornment","fetchtype","id","domain","registrar","log","handleSubmit","event","preventDefault","check","onChange","onCheck","formValue","fluid","Input","appearance","onClick","Model","SchemaModel","Types","NumberType","ArrayType","DateType","ObjectType","BooleanType","MixedType"],"sourceRoot":""}